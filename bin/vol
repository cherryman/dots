#!/bin/dash

err() { echo "$@" 1>&2; }

usage() {
cat << EOF
usage: $(basename "$0") <command> [<args>]

Commands:
  get
  set    <vol>
  inc    <amount>          Increase the volume
  dec    <amount>          Decrease the volume
  mute   <on|off|toggle>   Mute, unmute or toggle
  subvol                   Listen for volume updates
  subdev                   Listen for audio device updates ("headphone" or "speaker")
EOF
}

if [ $# -eq 0 ] || [ "$1" = help ]; then
    usage
    exit 0
fi

getvol() {
    wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{ print $2 * 100 }'
}

setvol() {
    wpctl set-mute @DEFAULT_AUDIO_SINK@ 0;
    wpctl set-volume -l "$MAX" @DEFAULT_AUDIO_SINK@ "$1"
}

getdev() {
    # HACK: Naively just checking if 'bluez' is in the output to decide if using headphones.
    if wpctl inspect @DEFAULT_AUDIO_SINK@ | grep bluez > /dev/null; then
        echo 'headphone'
    else
        echo 'speaker'
    fi
}

subscribe() {
    pactl subscribe |
        grep --line-buffered "Event 'change' on sink"
}

readonly MAX=0.6

case "$1" in
    get) wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{ print $2 * 100 }' ;;
    set|inc|dec|mute)
        if [ $# -ne 2 ]; then
            err "Invalid number of arguments"
            exit 1
        fi

        case "$1" in
            set) setvol "$2%" ;;
            inc) setvol "$2%+" ;;
            dec) setvol "$2%-" ;;
            mute)
                case "$2" in
                    on) wpctl set-mute @DEFAULT_AUDIO_SINK@ 1 ;;
                    off) wpctl set-mute @DEFAULT_AUDIO_SINK@ 0 ;;
                    toggle) wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle ;;
                esac
                ;;
        esac
        ;;
    subvol)
        getvol
        subscribe | while read -r _; do
            getvol
        done
        ;;
    subdev)
        {
            getdev
            subscribe | while read -r _; do
                getdev
            done
        } 2> /dev/null
        ;;
    *)
        err "Invalid command $1"
        exit 1
        ;;
esac
