let skip_defaults_vim=1

" ---- Plug {{{
runtime vim-plug/plug.vim

call plug#begin('~/.vim/plugged')

Plug 'antoinemadec/FixCursorHold.nvim'

" themes
Plug 'kaicataldo/material.vim', { 'branch': 'main' }

" defaults
Plug 'tpope/vim-repeat'
Plug 'farmergreg/vim-lastplace'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'CherryMan/vim-commentary-yank'
Plug 'wellle/targets.vim'
Plug 'Raimondi/delimitMate'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-obsession'
Plug 'editorconfig/editorconfig-vim'

" interface
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'rhysd/git-messenger.vim'

" util
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-hijack.vim'
Plug 'embear/vim-localvimrc'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'

" edit
Plug 'alvan/vim-closetag'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

" lang
Plug 'lervag/vimtex'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'ziglang/zig.vim'

call plug#end()

" install missing plugins
autocmd VimEnter *
\   if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
\ |     PlugInstall --sync | q
\ | endif

"}}}
" ---- Functions {{{
let g:linting = 0

fun! Format()
    if &formatprg ==# "" | return | endif
    mkview!
    silent let out = systemlist(&fp, getline(1, '$'))
    if v:shell_error == 0
        silent! exe len(out) . ',' line('$') . 'delete _'
        call setline(1, l:out)
    else
        echo 'Failed to format'
    endif
    silent! loadview
endfun

command! -nargs=0 Format call Format()

"}}}
" ---- Colours {{{
filetype plugin on
syntax enable

set termguicolors
if !has('nvim')
    " fix for termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

let g:onedark_terminal_italics = 1
let g:palenight_terminal_italics = 1
let g:material_terminal_italics = 1
let g:material_theme_style = 'default'

set background=dark

colorscheme material
let g:lightline_colorscheme = 'material'

"}}}
" ---- Indentation {{{
set tabstop=4     " ts
set softtabstop=4 " sts
set expandtab     " et
set shiftwidth=4  " sw

augroup indent
    au!
    au FileType go          setl noet
    au FileType javascript* setl ts=2 sts=2 sw=2
    au FileType typescript* setl ts=2 sts=2 sw=2
    au FileType html*,css   setl ts=2 sts=2 sw=2
    au FileType scss,less   setl ts=2 sts=2 sw=2
    au FileType asm         setl noet ts=6 sw=6 sts=0
    au FileType make        setl noet ts=8 sw=8 sts=0
    au FileType *tex        setl tw=72 ts=2 sts=2 sw=2
    au FileType context     setl tw=72 ts=2 sts=2 sw=2
    au FileType markdown    setl tw=72
    au FileType pandoc      setl tw=72
    au FileType yaml        setl ts=2 sts=2 sw=2
    au FileType scheme      setl ts=2 sts=2 sw=2
    au FileType dart        setl ts=2 sts=2 sw=2 cino=m1
    au FileType lua         setl ts=2 sts=2 sw=2
    au FileType ocaml       setl ts=2 sts=2 sw=2
augroup END

augroup formatter
    au!
    au FileType javascript* setl fex= fp=prettier\ --parser=babel
    au FileType typescript* setl fex= fp=prettier\ --parser=typescript
    au FileType html*       setl fex= fp=prettier\ --parser=html
    au FileType css         setl fex= fp=prettier\ --parser=css
    au FileType scss        setl fex= fp=prettier\ --parser=scss
    au FileType less        setl fex= fp=prettier\ --parser=less
    au FileType haskell     setl fex= fp=stylish-haskell
    au FileType elixir      setl fex= fp=mix\ format\ -
    au FileType rust        setl fex= fp=rustfmt
    au FileType zig         setl fex= fp=zig\ fmt\ --stdin
    au FileType python      setl fex= fp=black\ --quiet\ -
augroup END

"}}}
" ---- Meta {{{
filetype indent on

set number " line numbers
set cursorline " highlight line under cursor
set laststatus=2 " open statusline
set noshowmatch " highlight matching bracket
set incsearch " search while typing
set hlsearch " highlight search
set splitbelow " open below instead of above
set mouse=a " mouse movement

if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

set ignorecase
set smartcase
set timeoutlen=500
set modeline
set nospell
set hidden
set scrolloff=3
set autoread
set completeopt=menuone,noinsert,noselect

set wildignore+=*.o,*.so,*.pyc,*.class
set wildignore+=*.png,*.jpg,*.zip,*.pdf
set wildignore+=*.DS_Store

if !empty($XDG_CACHE_HOME)
    if !isdirectory($XDG_CACHE_HOME.'/vim')
        call mkdir($XDG_CACHE_HOME.'/vim', 'p')
    endif
    set directory=$XDG_CACHE_HOME/vim,.,/var/tmp,/tmp,
    set backupdir=$XDG_CACHE_HOME/vim,.,~/

    if !has('nvim')
        set viminfofile=$XDG_CACHE_HOME/vim/viminfo
    endif
endif

"}}}
" ---- Keybinds {{{

let mapleader = "\<Space>"
let maplocalleader = "\\"

imap jk <esc>
nnoremap <C-w>- <C-w>s
nnoremap <C-w>\ <C-w>v
nmap <Leader>w <C-w>
nnoremap <BS> <C-^>

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <A-f> <S-Right>
cnoremap <A-b> <S-Left>

nmap <Leader>la <Plug>(EasyAlign)
xmap <Leader>la <Plug>(EasyAlign)
nmap <Leader>gm <Plug>(git-messenger)

nmap <Leader>ff :Files .<CR>
nmap <Leader>fg :Rg<CR>
nmap <Leader>fb :Buffers<CR>
nmap <Leader>ft :Fern . -drawer -toggle<CR>

nmap <Leader>tn :set number!<CR>
nmap <Leader>tr :set relativenumber!<CR>

nmap <silent> <Leader>gq :Format<CR>
nmap <silent> <Leader>y :%y+<CR>

imap <expr> <C-j> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-j>'
imap <expr> <C-k> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-k>'
imap <expr> <Tab> pumvisible() ? '<C-n>' : '<Tab>'
imap <expr> <S-Tab> pumvisible() ? '<C-p>' : '<S-Tab>'
imap <expr> <CR>  pumvisible() ? '<C-y>' : '<Plug>delimitMateCR'

noremap <silent> <A-h> :TmuxNavigateLeft<CR>
noremap <silent> <A-j> :TmuxNavigateDown<CR>
noremap <silent> <A-k> :TmuxNavigateUp<CR>
noremap <silent> <A-l> :TmuxNavigateRight<CR>
inoremap <silent> <A-h> <C-o>:TmuxNavigateLeft<CR>
inoremap <silent> <A-j> <C-o>:TmuxNavigateDown<CR>
inoremap <silent> <A-k> <C-o>:TmuxNavigateUp<CR>
inoremap <silent> <A-l> <C-o>:TmuxNavigateRight<CR>

" abbrevs
augroup abbrevs
    au!
    au FileType c,cpp iab #i #include
augroup END

"}}}
" ---- Plugin Configuration {{{
augroup plugins
    au!
augroup END

" delimitMate
let g:delimitMate_expand_cr = 1
augroup plugins
    au FileType scheme   let b:delimitMate_quotes = '"'
    au FileType *verilog let b:delimitMate_quotes = '"'
    au FileType matlab   let b:delimitMate_quotes = '"'
    au FileType lisp     let b:delimitMate_quotes = '"'
    au FileType xml,html let b:delimitMate_matchpairs = '(:),[:],{:}'
augroup END

" fzf
let g:fzf_preview_window = ['right:60%', 'ctrl-/']
let g:fzf_layout = { 'window': { 'width': 0.95, 'height': 0.9 } }
if executable('fd')
    let $FZF_DEFAULT_COMMAND = 'fd -t f -H -E ".git/" -c never ""'
elseif executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --color never -g "!.git/"'
endif

" git-messenger
let g:git_messenger_no_default_mappings = v:true

" haskell-vim
let g:haskell_indent_disable = 0
let g:haskell_indent_if = 4
let g:haskell_indent_case = 4
let g:haskell_indent_let = 4
let g:haskell_indent_where = 4
let g:haskell_indent_before_where = 2
let g:haskell_indent_after_bare_where = 4
let g:haskell_indent_do = 4
let g:haskell_indent_in = 1
let g:haskell_indent_guard = 4

" local-vimrc
let g:localvimrc_name = ['.lvimrc', '_vimrc_local.vim']
let g:localvimrc_sandbox = 0
let g:localvimrc_whitelist = [
\   $HOME . '/proj',
\   $HOME . '/work',
\   $HOME . '/hack',
\   $HOME . '/study',
\]

" vim-closetag
let g:closetag_filenames = '*.xml,*.html,*.jsx,*.tsx,*.js'
let g:closetag_regions = {
\ 'typescriptreact': 'jsxRegion,tsxRegion',
\ 'javascriptreact': 'jsxRegion',
\ 'javascript': 'jsxRegion',
\ }

" vim-gitgutter
let g:gitgutter_map_keys = 0
let g:gitgutter_override_sign_column_highlight = 0

" vim-lightline
fun! LightlineLinting()
    return g:linting ? 'lint' : ''
endfun

let g:lightline = {
\   'colorscheme': g:lightline_colorscheme,
\   'active': {
\       'left': [
\           ['paste'],
\           ['readonly', 'filename', 'modified'],
\           ['linting'],
\       ],
\       'right': [
\           ['lineinfo'],
\           ['percent'],
\           ['fileformat', 'fileencoding', 'filetype'],
\       ],
\   },
\   'component_function': {
\       'linting': 'LightlineLinting',
\   }
\ }

" vim-pandoc
let g:pandoc#folding#level = 6
let g:pandoc#folding#fdc = 0

" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1

" python-mode
let g:python_highlight_space_errors = 0

" vimtex
let g:tex_flavor = 'latex'

" vim-vsnip
let g:vsnip_snippet_dir = $HOME . '/.vim/snippets'

" zig
let g:zig_fmt_autosave = 0

"}}}

" vim:foldmethod=marker:foldlevel=0
